// stylelint-disable declaration-no-important

@function from-to($from, $to) {
  $result: ();
  @for $i from $from through $to {
    $result: append($result, $i);
  }
  @return zip($result, $result);
}

$align-utilities: (
  responsive: true,
  property: vertical-align,
  property-class: align,
  values: baseline top middle bottom text-bottom text-top
) !default;

$float-utilities: (
  property: float,
  values: left right none
) !default;

$overflow-utilities: (
  property: overflow,
  values: auto hidden,
) !default;

$display-utilities: (
  responsive: true,
  print: true,
  property: display,
  property-class: d,
  values: none inline inline-block block table table-row table-cell flex inline-flex
) !default;

$order-utilities: (
  responsive: true,
  property: order,
  values: join(
      (
        first: -1,
        last: $grid-columns + 1
      ),
      from-to(0, $grid-columns)
  ),
) !default;

$shadow-utilities: (
  property: box-shadow,
  property-class: shadow,
  values: (
    sm: $box-shadow-sm,
    null: $box-shadow,
    lg: $box-shadow-lg,
    none: none,
  )
) !default;

$position-utilities: (
  property: position,
  values: static relative absolute fixed sticky
) !default;

$visibility-utilities: (
  property: visibility,
  values: visible hidden
) !default;


// Sizing utilities

$width-utilities: (
  property: width,
  property-class: w,
  values: (
    25: 25%,
    50: 50%,
    75: 75%,
    100: 100%,
    auto: auto
  )
) !default;

$height-utilities: (
  property: height,
  property-class: h,
  values: (
    25: 25%,
    50: 50%,
    75: 75%,
    100: 100%,
    auto: auto
  )
) !default;


// Flex utilities

$flex-direction-utilities: (
  responsive: true,
  property: flex-direction,
  property-class: flex,
  values: row column row-reverse column-reverse
) !default;

$flex-utilities: (
  responsive: true,
  property: flex,
  values: (fill: 1 1 auto)
) !default;

$flex-grow-utilities: (
  responsive: true,
  property: flex-grow,
  values: 0 1
) !default;

$flex-shrink-utilities: (
  responsive: true,
  property: flex-shrink,
  values: 0 1
) !default;

$flex-wrap-utilities: (
  responsive: true,
  property: flex-wrap,
  property-class: flex,
  values: wrap nowrap wrap-reverse
) !default;

$justify-content-utilities: (
  responsive: true,
  property: justify-content,
  values: flex-start flex-end center space-between space-around
) !default;

$align-items-utilities: (
  responsive: true,
  property: align-items,
  values: flex-start flex-end center baseline stretch
) !default;

$align-content-utilities: (
  responsive: true,
  property: align-content,
  values: flex-start flex-end center space-between space-around stretch
) !default;

$align-self-utilities: (
  responsive: true,
  property: align-self,
  values: auto flex-start flex-end center baseline stretch
) !default;


// Text utilities

$text-align-utilities: (
  property: text-align,
  property-class: text,
  values: left right center
) !default;


// Margin utilities

$margin-utilities: (
  responsive: true,
  property: margin,
  property-class: m,
  values: $spacers
) !default;

$margin-x-utilities: (
  responsive: true,
  property: margin-right margin-right,
  property-class: mx,
  values: $spacers
) !default;

$margin-y-utilities: (
  responsive: true,
  property: margin-top margin-bottom,
  property-class: my,
  values: $spacers
) !default;

$margin-top-utilities: (
  responsive: true,
  property: margin-top,
  property-class: mt,
  values: $spacers
) !default;

$margin-right-utilities: (
  responsive: true,
  property: margin-right,
  property-class: mr,
  values: $spacers
) !default;

$margin-bottom-utilities: (
  responsive: true,
  property: margin-bottom,
  property-class: mb,
  values: $spacers
) !default;

$margin-left-utilities: (
  responsive: true,
  property: margin-left,
  property-class: ml,
  values: $spacers
) !default;


// Padding utilities

$padding-utilities: (
  responsive: true,
  property: padding,
  property-class: p,
  values: $spacers
) !default;

$padding-x-utilities: (
  responsive: true,
  property: padding-right padding-right,
  property-class: px,
  values: $spacers
) !default;

$padding-y-utilities: (
  responsive: true,
  property: padding-top padding-bottom,
  property-class: py,
  values: $spacers
) !default;

$padding-top-utilities: (
  responsive: true,
  property: padding-top,
  property-class: pt,
  values: $spacers
) !default;

$padding-right-utilities: (
  responsive: true,
  property: padding-right,
  property-class: pr,
  values: $spacers
) !default;

$padding-bottom-utilities: (
  responsive: true,
  property: padding-bottom,
  property-class: pb,
  values: $spacers
) !default;

$padding-left-utilities: (
  responsive: true,
  property: padding-left,
  property-class: pl,
  values: $spacers
) !default;


// Text

$font-weight-utilities: (
  property: font-weight,
  values: (
    light: $font-weight-light,
    lighter: $font-weight-lighter,
    normal: $font-weight-normal,
    bold: $font-weight-bold,
    bolder: $font-weight-bolder
  )
) !default;

$text-transform-utilities: (
  property: text-transform,
  property-class: text,
  values: lowercase uppercase capitalize
) !default;

$text-utilities-utilities: (
  responsive: true,
  property: text-align,
  property-class: text,
  values: left right center
) !default;


$utilities: (
  $float-utilities,
  $display-utilities,
  $order-utilities,
  $overflow-utilities,
  $shadow-utilities,
  $height-utilities,
  $width-utilities,
  $align-utilities,
  $visibility-utilities,
  $flex-utilities,
  $flex-grow-utilities,
  $flex-shrink-utilities,
  $flex-wrap-utilities,
  $justify-content-utilities,
  $align-items-utilities,
  $align-content-utilities,
  $align-self-utilities,
  $margin-utilities,
  $margin-x-utilities,
  $margin-y-utilities,
  $margin-top-utilities,
  $margin-right-utilities,
  $margin-bottom-utilities,
  $margin-left-utilities,
  $padding-utilities,
  $padding-x-utilities,
  $padding-y-utilities,
  $padding-top-utilities,
  $padding-right-utilities,
  $padding-bottom-utilities,
  $padding-left-utilities,
  $font-weight-utilities,
  $text-transform-utilities,
) !default;

// Loop over every breakpoint
@each $breakpoint in map-keys($grid-breakpoints) {
  // Generate media query if needed
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    // Loop over each utility property
    @each $key, $utility in $utilities {

      // Only render if responsive media queries are enabled or if it's the base media query
      @if ((map_get($utility, responsive) or $infix == "") and map_get($utility, enabled) != false) {
        $values: map_get($utility, values);

        @if type_of($values) == "string" {
          $values: zip($values, $values);
        } @else if type_of(nth($values, 1)) != "list" {
          $values: zip($values, $values);
        }

        @each $value in $values {
          $properties: map_get($utility, property);


          @if type_of($properties) == "string" {
            $properties: append((), $properties);
          }

          @each $property in $properties {

            $property-class: map_get($utility, property-class);
            $property-class: if($property-class, $property-class, $property);

            // Don't prefix if value key is null (eg. with shadow class)
            $property-class-modifier: if(nth($value, 1), "-" + nth($value, 1), "");

            .#{$property-class + $infix + $property-class-modifier} {
              #{$property}: #{nth($value, 2)} !important;
            }
          }
        }
      }
    }
  }
}


// Loop over each utility property
@media print {
  @each $utility in $utilities {
    @if map_get($utility, print) == true {

      // Lot of duplicate code copied from above
      // TODO: cleanup
      $values: map_get($utility, values);

      @if type_of($values) == "string" {
        $values: zip($values, $values);
      } @else if type_of(nth($values, 1)) != "list" {
        $values: zip($values, $values);
      }

      @each $value in $values {
        $property: map_get($utility, property);
        $property-class: map_get($utility, property-class);
        $property-class: if($property-class, $property-class, $property);

        $property-class-modifier: if(nth($value, 1), "-" + nth($value, 1), "");

        .#{$property-class + '-print' + $property-class-modifier} {
          #{$property}: #{nth($value, 2)} !important;
        }
      }
    }
  }
}
